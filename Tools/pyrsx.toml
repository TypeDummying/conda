
# pyrsx.toml - Configuration for Python-Rust Integration

# Project Metadata
[project]
name = "pyrsx"
version = "0.1.0"
authors = ["virt0"]
description = "A powerful Python-Rust integration framework"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Rust",
]

# Dependencies
[dependencies]
python = "^3.7"
maturin = "^0.14"
pyo3 = "^0.18"
numpy = "^1.21"
pandas = "^1.3"

# Build System Configuration
[build-system]
requires = ["maturin>=0.14,<0.15"]
build-backend = "maturin"

# Maturin Configuration
[tool.maturin]
python-source = "python"
module-name = "pyrsx._rust"
features = ["pyo3/extension-module"]

# Rust Compilation Settings
[package]
name = "pyrsx"
version = "0.1.0"
edition = "2021"

[lib]
name = "pyrsx"
crate-type = ["cdylib"]

# Python Package Configuration
[tool.poetry]
name = "pyrsx"
version = "0.1.0"
description = "A powerful Python-Rust integration framework"
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.7"
numpy = "^1.21"
pandas = "^1.3"

[tool.poetry.dev-dependencies]
pytest = "^6.2"
black = "^21.9b0"
isort = "^5.9"
mypy = "^0.910"

# Code Formatting
[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

# Type Checking
[tool.mypy]
ignore_missing_imports = true
strict = true

# Testing Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
    "integration_tests",
]

# Documentation
[tool.pdoc3]
modules = ["pyrsx"]
html_dir = "docs"
output_dir = "api_docs"
template_dir = "doc_templates"

# Continuous Integration
[tool.tox]
envlist = ["py37", "py38", "py39", "py310"]

[tool.coverage.run]
source = ["pyrsx"]
omit = ["tests/*", "examples/*"]

# Performance Benchmarks
[tool.asv]
# Benchmarking settings using Airspeed Velocity
environment_type = "conda"
show_commit_url = "http://github.com/username/pyrsx/commit/{commit}"
pythons = ["3.7", "3.8", "3.9", "3.10"]

# Rust-specific configurations
[package.metadata.maturin]
classifier = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

# Advanced Rust compilation options
[profile.release]
opt-level = 3
debug = false
rpath = false
lto = true
debug-assertions = false
codegen-units = 1
panic = 'abort'
incremental = false
overflow-checks = true

# Development tools configuration
[dev-dependencies]
criterion = "0.3"
proptest = "1.0"

# Benchmarking configuration
[[bench]]
name = "pyrsx_benchmarks"
harness = false

# Example configurations
[example]
name = "basic_usage"
path = "examples/basic_usage.rs"

[example.advanced]
name = "advanced_usage"
path = "examples/advanced_usage.rs"
required-features = ["advanced"]

# Logging and error handling
[dependencies.log]
version = "0.4"
features = ["max_level_trace", "release_max_level_info"]

[dependencies.env_logger]
version = "0.9"

# Cross-compilation settings
[target.'cfg(target_os = "windows")'.dependencies]
winapi = { version = "0.3", features = ["winuser", "winbase"] }

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = "0.9"

# Feature flags
[features]
default = ["std"]
std = []
advanced = ["rayon", "serde"]

# Optional dependencies
[dependencies.rayon]
version = "1.5"
optional = true

[dependencies.serde]
version = "1.0"
features = ["derive"]
optional = true

# Documentation generation
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Linting and code quality
[package.metadata.clippy]
warn-on-all-wildcard-imports = true

# Security auditing
[package.metadata.cargo-audit]
ignore = [] # Add any vulnerabilities to ignore here

# Continuous Deployment
[package.metadata.release]
sign-commit = true
upload-doc = true
pre-release-commit-message = "Release version {{version}}"
pro-release-commit-message = "Start next development iteration {{version}}"
tag-message = "Release version {{version}}"
tag-name = "{{version}}"
